name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            platform: x86
            runtimeIdentifier: win-x86
          - os: windows-latest
            platform: x64
            runtimeIdentifier: win-x64
          - os: windows-latest
            platform: ARM64
            runtimeIdentifier: win-arm64
          # Linux builds
          - os: ubuntu-latest
            platform: x64
            runtimeIdentifier: linux-x64
          # TODO: Fix arm32 linux build.
          #- os: ubuntu-latest
          #  platform: ARM32
          #  runtimeIdentifier: linux-arm
          - os: ubuntu-latest
            platform: ARM64
            runtimeIdentifier: linux-arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      # Install GCC and Clang dependencies for Linux builds.
      - name: Install GCC dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc gcc-multilib g++ g++-multilib clang

      # Install ARM32 toolchain for linux-arm
      - name: Install ARM32 toolchain for linux-arm
        if: matrix.runtimeIdentifier == 'linux-arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf

      # Install ARM64 toolchain for linux-arm64
      - name: Install ARM64 toolchain for linux-arm64
        if: matrix.runtimeIdentifier == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu

      - name: Restore NuGet packages
        run: dotnet restore "Nucleares Web Forwarder.sln"

      - name: Publish build for Linux
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.runtimeIdentifier }}" = "linux-arm64" ]; then
            dotnet publish "Nucleares Web Forwarder.csproj" -c Release -r linux-arm64 --self-contained true \
              /p:PublishSingleFile=true \
              /p:PublishReadyToRun=true \
              /p:PublishAot=true \
              /p:ObjCopyName=aarch64-linux-gnu-objcopy \
              -o build/${{ matrix.platform }}
          elif [ "${{ matrix.runtimeIdentifier }}" = "linux-arm" ]; then
            dotnet publish "Nucleares Web Forwarder.csproj" -c Release -r linux-arm --self-contained true \
              /p:PublishSingleFile=true \
              /p:PublishReadyToRun=true \
              /p:PublishAot=true \
              /p:IlcTargetTriple=armv7-linux-gnueabihf \
              -o build/${{ matrix.platform }}
          else
            dotnet publish "Nucleares Web Forwarder.csproj" -c Release -r ${{ matrix.runtimeIdentifier }} --self-contained true \
              /p:PublishSingleFile=true \
              /p:PublishReadyToRun=true \
              /p:PublishAot=true \
              -o build/${{ matrix.platform }}
          fi

      - name: Publish build for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: dotnet publish "Nucleares Web Forwarder.csproj" -c Release -r ${{ matrix.runtimeIdentifier }} --self-contained true /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:PublishAot=true -o build/${{ matrix.platform }}

      - name: Upload build artifact for ${{ matrix.platform }}
        uses: actions/upload-artifact@v4
        with:
          # Append OS, platform, and runtimeIdentifier to ensure a unique artifact name
          name: build-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.runtimeIdentifier }}
          path: build/${{ matrix.platform }}/*

  release:
    name: Create Release and Upload Assets
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: build_artifacts

      - name: Zip build artifacts
        run: powershell -Command "Compress-Archive -Path 'build_artifacts\*' -DestinationPath release.zip"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "Automated release for tag ${{ github.ref }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: NuclearesWebForwarder.zip
          asset_content_type: application/zip
